#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('echoapp:server');
var http = require('http');
var socketIO = require('socket.io');
var moment = require('moment');

var { RoomUsers } = require('../models/roomUsers');
var roomUsers = new RoomUsers();
app.set('roomUsers', roomUsers);
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketIO(server);

const generateMessage = (from, text) => {
  return {
    from, 
    text, 
    createdAt: moment().valueOf(new Date().getTime())
  }
};


io.on('connection', function (socket) {
  socket.on('join', (params, callback) => {
    app.set('socketio', socket);
    app.set('io', io);
    socket.join(params.room);
    roomUsers.removeUser(socket.id);
    roomUsers.addUser(socket.id, params.name, params.room);
    io.to(params.room).emit('updateUserList', roomUsers.getUserList(params.room));

    // To the new user
    socket.emit(
      'newMessage',
      generateMessage('Admin', 'Welcome to the chat app')
    );
    // To everyone but the new user
    socket.broadcast
      .to(params.room)
      .emit(
        'newMessage',
        generateMessage('Admin', `${params.name} has joined`)
      );

    callback();
  });

  socket.on('createMessage', (message, callback) => {
    var user = roomUsers.getUser(socket.id);
    if (user) {
      io
        .to(user.room)
        .emit('newMessage', generateMessage(user.name, message.text));
    }
    callback();
  });

  socket.on('disconnect', () => {
    console.log('User disconnected from Server');
    var user = roomUsers.removeUser(socket.id);

    if (user) {
      io.to(user.room).emit('updateUserList', roomUsers.getUserList(user.room));
      io
        .to(user.room)
        .emit('newMessage', generateMessage('Admin', `${user.name} has left`));
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
